// Code generated by the Encore 1.48.8 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
// Local placeholder types to avoid external dependency on encore.dev/api
type CookieWithOptions<T> = T;

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string;

export const Local: BaseURL = "http://localhost:4000";

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
  return `https://${name}-.encr.app`;
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
  return Environment(`pr${pr}`);
}

const BROWSER = typeof globalThis === "object" && "window" in globalThis;

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
  public readonly invoice: invoice.ServiceClient;
  private readonly options: ClientOptions;
  private readonly target: string;

  /**
   * Creates a Client for calling the public and authenticated APIs of your Encore application.
   *
   * @param target  The target which the client should be configured to use. See Local and Environment for options.
   * @param options Options for the client
   */
  constructor(target: BaseURL, options?: ClientOptions) {
    this.target = target;
    this.options = options ?? {};
    const base = new BaseClient(this.target, this.options);
    this.invoice = new invoice.ServiceClient(base);
  }

  /**
   * Creates a new Encore client with the given client options set.
   *
   * @param options Client options to set. They are merged with existing options.
   **/
  public with(options: ClientOptions): Client {
    return new Client(this.target, {
      ...this.options,
      ...options,
    });
  }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
  /**
   * By default the client will use the inbuilt fetch function for making the API requests.
   * however you can override it with your own implementation here if you want to run custom
   * code on each API request made or response received.
   */
  fetcher?: Fetcher;

  /** Default RequestInit to be used for the client */
  requestInit?: Omit<RequestInit, "headers"> & {
    headers?: Record<string, string>;
  };
}

export namespace invoice {
  export class ServiceClient {
    private baseClient: BaseClient;

    constructor(baseClient: BaseClient) {
      this.baseClient = baseClient;
      this.createCustomer = this.createCustomer.bind(this);
      this.createInvoice = this.createInvoice.bind(this);
      this.deleteCustomer = this.deleteCustomer.bind(this);
      this.deleteInvoice = this.deleteInvoice.bind(this);
      this.getInvoice = this.getInvoice.bind(this);
      this.listCustomers = this.listCustomers.bind(this);
      this.listInvoices = this.listInvoices.bind(this);
      this.updateCustomer = this.updateCustomer.bind(this);
      this.updateInvoiceStatus = this.updateInvoiceStatus.bind(this);
    }

    /**
     * Creates a new customer.
     */
    public async createCustomer(params: {
      name: string;
      email?: string;
      phone?: string;
      address?: string;
    }): Promise<any> {
      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(`/api/customers`, {
        method: "POST",
        body: JSON.stringify(params),
      });
      return JSON.parse(await resp.text(), dateReviver) as any;
    }

    /**
     * Creates a new invoice with automatic invoice number generation.
     */
    public async createInvoice(params: any): Promise<any> {
      // Now make the actual call to the API
      // If coming from CreateInvoice page shape, compute amount and customer name fallback
      let payload: any = params;
      try {
        if (params && Array.isArray(params.items)) {
          const subtotal = params.items.reduce(
            (sum: number, it: any) =>
              sum + (Number(it.quantity) || 0) * (Number(it.unit_price) || 0),
            0
          );
          const taxRate = Number(params.tax_rate) || 0;
          const taxAmount = subtotal * (taxRate / 100);
          const total = subtotal + taxAmount;
          payload = {
            customer:
              params.customer_name ||
              params.customer ||
              params.customer_id ||
              "",
            amount: total,
            status: "draft",
            items: params.items,
          };
        }
      } catch {}

      const resp = await this.baseClient.callTypedAPI(`/api/invoices`, {
        method: "POST",
        body: JSON.stringify(payload),
      });
      const json = JSON.parse(await resp.text(), dateReviver) as any;
      // Enrich response with fields expected by UI
      const normalizedItems = Array.isArray(params?.items)
        ? params.items.map((it: any) => {
            const quantity = Number(it.quantity) || 0;
            const unit_price = Number(it.unit_price) || 0;
            return {
              description: it.description ?? "",
              quantity,
              unit_price,
              total_price: quantity * unit_price,
            };
          })
        : [];
      const subtotal = normalizedItems.reduce(
        (sum: number, it: any) => sum + it.total_price,
        0
      );
      // Prefer UI-provided tax_rate, but if backend responds with final amount, infer tax
      let taxRate = Number(params?.tax_rate);
      const backendAmount =
        json.amount != null ? Number(json.amount) : undefined;
      let taxAmount: number;
      if ((Number.isNaN(taxRate) || taxRate === 0) && backendAmount != null) {
        taxAmount = Math.max(0, backendAmount - subtotal);
        taxRate = subtotal > 0 ? (taxAmount / subtotal) * 100 : 0;
      } else {
        taxRate = Number.isNaN(taxRate) ? 0 : taxRate;
        taxAmount = subtotal * (taxRate / 100);
      }
      const total =
        Number(json.total_amount ?? backendAmount ?? subtotal + taxAmount) || 0;

      // Ensure customer is an object with name (not just id)
      let customerResolved: any =
        typeof json.customer === "object" && json.customer !== null
          ? json.customer
          : undefined;
      if (!customerResolved) {
        try {
          if (typeof json.customer === "string") {
            if (/^\d+$/.test(json.customer)) {
              const idCandidate = Number(json.customer);
              const custResp = await this.baseClient.callTypedAPI(
                `/api/customers`,
                { method: "GET", body: undefined }
              );
              const customers =
                (JSON.parse(await custResp.text(), dateReviver) as any[]) || [];
              const found = customers.find(
                (c: any) => Number(c.id) === idCandidate
              );
              if (found) customerResolved = { id: found.id, name: found.name };
              else customerResolved = { name: json.customer };
            } else {
              customerResolved = { name: json.customer };
            }
          } else {
            const idCandidate = Number(json.customer ?? params?.customer_id);
            if (!Number.isNaN(idCandidate)) {
              const custResp = await this.baseClient.callTypedAPI(
                `/api/customers`,
                { method: "GET", body: undefined }
              );
              const customers =
                (JSON.parse(await custResp.text(), dateReviver) as any[]) || [];
              const found = customers.find(
                (c: any) => Number(c.id) === idCandidate
              );
              if (found) customerResolved = { id: found.id, name: found.name };
            }
          }
        } catch {}
      }
      return {
        ...json,
        invoice_number: `INV-${String(json.id).padStart(5, "0")}`,
        issue_date: params?.issue_date ?? json.issue_date ?? new Date(),
        due_date: params?.due_date ?? json.due_date ?? new Date(),
        items: normalizedItems,
        tax_rate: taxRate,
        tax_amount: taxAmount,
        subtotal,
        total_amount: total,
        customer: customerResolved ?? json.customer,
      } as any;
    }

    /**
     * Deletes a customer.
     */
    public async deleteCustomer(params: { id: number }): Promise<void> {
      await this.baseClient.callTypedAPI(
        `/api/customers/${encodeURIComponent(params.id)}`,
        { method: "DELETE", body: undefined }
      );
    }

    /**
     * Deletes an invoice and all its items.
     */
    public async deleteInvoice(params: { id: number }): Promise<void> {
      await this.baseClient.callTypedAPI(
        `/api/invoices/${encodeURIComponent(params.id)}`,
        { method: "DELETE", body: undefined }
      );
    }

    /**
     * Retrieves a specific invoice by ID with all related data.
     */
    public async getInvoice(params: { id: number }): Promise<any> {
      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(
        `/api/invoices/${encodeURIComponent(params.id)}`,
        { method: "GET", body: undefined }
      );
      const inv = JSON.parse(await resp.text(), dateReviver) as any;
      const normalizedItems = Array.isArray(inv.items)
        ? inv.items.map((it: any) => {
            const quantity = Number(it.quantity) || 0;
            const unit_price = Number(it.unit_price) || 0;
            return {
              description: it.description ?? "",
              quantity,
              unit_price,
              total_price: quantity * unit_price,
            };
          })
        : [];
      const subtotal = normalizedItems.reduce(
        (s: number, it: any) => s + it.total_price,
        0
      );
      const backendAmount = inv.amount != null ? Number(inv.amount) : undefined;
      let taxRate = inv.tax_rate != null ? Number(inv.tax_rate) : 0;
      // If taxRate is missing but backend provided a total amount, infer tax from amount - subtotal
      let taxAmount: number;
      if ((taxRate === 0 || Number.isNaN(taxRate)) && backendAmount != null) {
        taxAmount = Math.max(0, backendAmount - subtotal);
        taxRate = subtotal > 0 ? (taxAmount / subtotal) * 100 : 0;
      } else {
        taxAmount = subtotal * (taxRate / 100);
      }
      const total = inv.total_amount ?? backendAmount ?? subtotal + taxAmount;
      // Ensure customer is an object with name
      let customerResolved: any =
        typeof inv.customer === "object" && inv.customer !== null
          ? inv.customer
          : undefined;
      if (!customerResolved) {
        try {
          if (typeof inv.customer === "string") {
            if (/^\d+$/.test(inv.customer)) {
              const idCandidate = Number(inv.customer);
              const custResp = await this.baseClient.callTypedAPI(
                `/api/customers`,
                { method: "GET", body: undefined }
              );
              const customers =
                (JSON.parse(await custResp.text(), dateReviver) as any[]) || [];
              const found = customers.find(
                (c: any) => Number(c.id) === idCandidate
              );
              if (found) customerResolved = { id: found.id, name: found.name };
              else customerResolved = { name: inv.customer };
            } else {
              customerResolved = { name: inv.customer };
            }
          } else if (typeof inv.customer === "number") {
            const custResp = await this.baseClient.callTypedAPI(
              `/api/customers`,
              { method: "GET", body: undefined }
            );
            const customers =
              (JSON.parse(await custResp.text(), dateReviver) as any[]) || [];
            const found = customers.find(
              (c: any) => Number(c.id) === Number(inv.customer)
            );
            if (found) customerResolved = { id: found.id, name: found.name };
          }
        } catch {}
      }
      return {
        ...inv,
        invoice_number:
          inv.invoice_number || `INV-${String(inv.id).padStart(5, "0")}`,
        items: normalizedItems,
        subtotal,
        tax_rate: taxRate,
        tax_amount: taxAmount,
        total_amount: total,
        customer: customerResolved ?? inv.customer,
      } as any;
    }

    /**
     * Retrieves all customers, ordered by name.
     */
    public async listCustomers(): Promise<any> {
      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(`/api/customers`, {
        method: "GET",
        body: undefined,
      });
      const json = JSON.parse(await resp.text(), dateReviver) as any;
      if (Array.isArray(json)) {
        return { customers: json };
      }
      return json;
    }

    /**
     * Retrieves all invoices with customer information, ordered by creation date.
     */
    public async listInvoices(): Promise<any> {
      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(`/api/invoices`, {
        method: "GET",
        body: undefined,
      });
      const json = JSON.parse(await resp.text(), dateReviver) as any;
      if (Array.isArray(json)) {
        // Resolve numeric customer ids (including numeric strings) to names
        let customersById: Record<number, any> | undefined;
        const hasNumeric = json.some(
          (inv: any) =>
            typeof inv.customer === "number" ||
            (typeof inv.customer === "string" && /^\d+$/.test(inv.customer))
        );
        if (hasNumeric) {
          try {
            const custResp = await this.baseClient.callTypedAPI(
              `/api/customers`,
              { method: "GET", body: undefined }
            );
            const customers =
              (JSON.parse(await custResp.text(), dateReviver) as any[]) || [];
            customersById = Object.fromEntries(
              customers.map((c: any) => [Number(c.id), c])
            );
          } catch {}
        }
        const mapped = json.map((inv: any) => {
          let customerObj = inv.customer;
          if (typeof inv.customer === "string") {
            if (/^\d+$/.test(inv.customer) && customersById) {
              const found = customersById[Number(inv.customer)];
              if (found) customerObj = { id: found.id, name: found.name };
              else customerObj = { name: inv.customer };
            } else {
              customerObj = { name: inv.customer };
            }
          } else if (typeof inv.customer === "number" && customersById) {
            const found = customersById[Number(inv.customer)];
            if (found) customerObj = { id: found.id, name: found.name };
          }
          return {
            ...inv,
            invoice_number:
              inv.invoice_number || `INV-${String(inv.id).padStart(5, "0")}`,
            total_amount: inv.total_amount ?? inv.amount ?? 0,
            customer: customerObj,
          };
        });
        return { invoices: mapped };
      }
      return json;
    }

    /**
     * Updates an existing customer.
     */
    public async updateCustomer(params: {
      id: number;
      name?: string;
      email?: string;
      phone?: string;
      address?: string;
    }): Promise<any> {
      // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
      const body: Record<string, any> = {
        address: params.address,
        email: params.email,
        name: params.name,
        phone: params.phone,
      };

      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(
        `/api/customers/${encodeURIComponent(params.id)}`,
        { method: "PUT", body: JSON.stringify(body) }
      );
      return JSON.parse(await resp.text(), dateReviver) as any;
    }

    /**
     * Updates the status of an invoice.
     */
    public async updateInvoiceStatus(params: {
      id: number;
      status: string;
    }): Promise<any> {
      // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
      const body: Record<string, any> = {
        status: params.status,
      };

      // Now make the actual call to the API
      const resp = await this.baseClient.callTypedAPI(
        `/api/invoices/${encodeURIComponent(params.id)}/status`,
        { method: "PATCH", body: JSON.stringify(body) }
      );
      return JSON.parse(await resp.text(), dateReviver) as any;
    }
  }
}

type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]] ? OmitCookie<H> : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<
  Awaited<ReturnType<Type>>
>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}

function encodeQuery(parts: Record<string, string | string[]>): string {
  const pairs: string[] = [];
  for (const key in parts) {
    const val = (
      Array.isArray(parts[key]) ? parts[key] : [parts[key]]
    ) as string[];
    for (const v of val) {
      pairs.push(`${key}=${encodeURIComponent(v)}`);
    }
  }
  return pairs.join("&");
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(
  record: Record<K, V | undefined>
): Record<K, V> {
  for (const key in record) {
    if (record[key] === undefined) {
      delete record[key];
    }
  }
  return record as Record<K, V>;
}

// Local placeholder types for streaming handler functions
type StreamInOutHandlerFn<A, Req, Resp> = any;
type StreamInHandlerFn<A, Req, Resp> = any;
type StreamOutHandlerFn<A, Resp> = any;

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;

function encodeWebSocketHeaders(headers: Record<string, string>) {
  // url safe, no pad
  const base64encoded = btoa(JSON.stringify(headers))
    .replaceAll("=", "")
    .replaceAll("+", "-")
    .replaceAll("/", "_");
  return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
  public ws: WebSocket;

  private hasUpdateHandlers: (() => void)[] = [];

  constructor(url: string, headers?: Record<string, string>) {
    let protocols = ["encore-ws"];
    if (headers) {
      protocols.push(encodeWebSocketHeaders(headers));
    }

    this.ws = new WebSocket(url, protocols);

    this.on("error", () => {
      this.resolveHasUpdateHandlers();
    });

    this.on("close", () => {
      this.resolveHasUpdateHandlers();
    });
  }

  resolveHasUpdateHandlers() {
    const handlers = this.hasUpdateHandlers;
    this.hasUpdateHandlers = [];

    for (const handler of handlers) {
      handler();
    }
  }

  async hasUpdate() {
    // await until a new message have been received, or the socket is closed
    await new Promise((resolve) => {
      this.hasUpdateHandlers.push(() => resolve(null));
    });
  }

  on(
    type: "error" | "close" | "message" | "open",
    handler: (event: any) => void
  ) {
    this.ws.addEventListener(type, handler);
  }

  off(
    type: "error" | "close" | "message" | "open",
    handler: (event: any) => void
  ) {
    this.ws.removeEventListener(type, handler);
  }

  close() {
    this.ws.close();
  }
}

export class StreamInOut<Request, Response> {
  public socket: WebSocketConnection;
  private buffer: Response[] = [];

  constructor(url: string, headers?: Record<string, string>) {
    this.socket = new WebSocketConnection(url, headers);
    this.socket.on("message", (event: any) => {
      this.buffer.push(JSON.parse(event.data, dateReviver));
      this.socket.resolveHasUpdateHandlers();
    });
  }

  close() {
    this.socket.close();
  }

  async send(msg: Request) {
    if (this.socket.ws.readyState === WebSocket.CONNECTING) {
      // await that the socket is opened
      await new Promise((resolve) => {
        this.socket.ws.addEventListener("open", resolve, { once: true });
      });
    }

    return this.socket.ws.send(JSON.stringify(msg));
  }

  async next(): Promise<Response | undefined> {
    for await (const next of this) return next;
    return undefined;
  }

  async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
    while (true) {
      if (this.buffer.length > 0) {
        yield this.buffer.shift() as Response;
      } else {
        if (this.socket.ws.readyState === WebSocket.CLOSED) return;
        await this.socket.hasUpdate();
      }
    }
  }
}

export class StreamIn<Response> {
  public socket: WebSocketConnection;
  private buffer: Response[] = [];

  constructor(url: string, headers?: Record<string, string>) {
    this.socket = new WebSocketConnection(url, headers);
    this.socket.on("message", (event: any) => {
      this.buffer.push(JSON.parse(event.data, dateReviver));
      this.socket.resolveHasUpdateHandlers();
    });
  }

  close() {
    this.socket.close();
  }

  async next(): Promise<Response | undefined> {
    for await (const next of this) return next;
    return undefined;
  }

  async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
    while (true) {
      if (this.buffer.length > 0) {
        yield this.buffer.shift() as Response;
      } else {
        if (this.socket.ws.readyState === WebSocket.CLOSED) return;
        await this.socket.hasUpdate();
      }
    }
  }
}

export class StreamOut<Request, Response> {
  public socket: WebSocketConnection;
  private responseValue: Promise<Response>;

  constructor(url: string, headers?: Record<string, string>) {
    let responseResolver: (_: any) => void;
    this.responseValue = new Promise((resolve) => (responseResolver = resolve));

    this.socket = new WebSocketConnection(url, headers);
    this.socket.on("message", (event: any) => {
      responseResolver(JSON.parse(event.data, dateReviver));
    });
  }

  async response(): Promise<Response> {
    return this.responseValue;
  }

  close() {
    this.socket.close();
  }

  async send(msg: Request) {
    if (this.socket.ws.readyState === WebSocket.CONNECTING) {
      // await that the socket is opened
      await new Promise((resolve) => {
        this.socket.ws.addEventListener("open", resolve, { once: true });
      });
    }

    return this.socket.ws.send(JSON.stringify(msg));
  }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
  /** Headers to be sent with the request */
  headers?: Record<string, string>;

  /** Query parameters to be sent with the request */
  query?: Record<string, string | string[]>;
};

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
  readonly baseURL: string;
  readonly fetcher: Fetcher;
  readonly headers: Record<string, string>;
  readonly requestInit: Omit<RequestInit, "headers"> & {
    headers?: Record<string, string>;
  };

  constructor(baseURL: string, options: ClientOptions) {
    this.baseURL = baseURL;
    this.headers = {};

    // Add User-Agent header if the script is running in the server
    // because browsers do not allow setting User-Agent headers to requests
    if (!BROWSER) {
      this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.8)";
    }

    this.requestInit = options.requestInit ?? {};

    // Setup what fetch function we'll be using in the base client
    if (options.fetcher !== undefined) {
      this.fetcher = options.fetcher;
    } else {
      this.fetcher = boundFetch;
    }
  }

  async getAuthData(): Promise<CallParameters | undefined> {
    // Saat SSR / Node, tidak ada window/localStorage
    if (typeof window === "undefined") return undefined;

    try {
      // Prioritas: admin invoice -> admin verifier -> client
      const adminInvoice = localStorage.getItem("admin_invoice_token");
      const adminVerifier = localStorage.getItem("admin_verifier_token");
      const clientToken = localStorage.getItem("client_token");

      const token = adminInvoice || adminVerifier || clientToken;
      if (!token) return undefined;

      // Header ini akan otomatis digabungkan pada setiap request
      return { headers: { Authorization: `Bearer ${token}` } };
    } catch {
      return undefined;
    }
  }

  // createStreamInOut sets up a stream to a streaming API endpoint.
  async createStreamInOut<Request, Response>(
    path: string,
    params?: CallParameters
  ): Promise<StreamInOut<Request, Response>> {
    let { query, headers } = params ?? {};

    // Fetch auth data if there is any
    const authData = await this.getAuthData();

    // If we now have authentication data, add it to the request
    if (authData) {
      if (authData.query) {
        query = { ...query, ...authData.query };
      }
      if (authData.headers) {
        headers = { ...headers, ...authData.headers };
      }
    }

    const queryString = query ? "?" + encodeQuery(query) : "";
    return new StreamInOut(this.baseURL + path + queryString, headers);
  }

  // createStreamIn sets up a stream to a streaming API endpoint.
  async createStreamIn<Response>(
    path: string,
    params?: CallParameters
  ): Promise<StreamIn<Response>> {
    let { query, headers } = params ?? {};

    // Fetch auth data if there is any
    const authData = await this.getAuthData();

    // If we now have authentication data, add it to the request
    if (authData) {
      if (authData.query) {
        query = { ...query, ...authData.query };
      }
      if (authData.headers) {
        headers = { ...headers, ...authData.headers };
      }
    }

    const queryString = query ? "?" + encodeQuery(query) : "";
    return new StreamIn(this.baseURL + path + queryString, headers);
  }

  // createStreamOut sets up a stream to a streaming API endpoint.
  async createStreamOut<Request, Response>(
    path: string,
    params?: CallParameters
  ): Promise<StreamOut<Request, Response>> {
    let { query, headers } = params ?? {};

    // Fetch auth data if there is any
    const authData = await this.getAuthData();

    // If we now have authentication data, add it to the request
    if (authData) {
      if (authData.query) {
        query = { ...query, ...authData.query };
      }
      if (authData.headers) {
        headers = { ...headers, ...authData.headers };
      }
    }

    const queryString = query ? "?" + encodeQuery(query) : "";
    return new StreamOut(this.baseURL + path + queryString, headers);
  }

  // callTypedAPI makes an API call, defaulting content type to "application/json"
  public async callTypedAPI(
    path: string,
    params?: CallParameters
  ): Promise<Response> {
    return this.callAPI(path, {
      ...params,
      headers: { "Content-Type": "application/json", ...params?.headers },
    });
  }

  // callAPI is used by each generated API method to actually make the request
  public async callAPI(
    path: string,
    params?: CallParameters
  ): Promise<Response> {
    let { query, headers, ...rest } = params ?? {};
    const init = {
      ...this.requestInit,
      ...rest,
    };

    // Merge our headers with any predefined headers
    init.headers = { ...this.headers, ...init.headers, ...headers };

    // Fetch auth data if there is any
    const authData = await this.getAuthData();

    // If we now have authentication data, add it to the request
    if (authData) {
      if (authData.query) {
        query = { ...query, ...authData.query };
      }
      if (authData.headers) {
        init.headers = { ...init.headers, ...authData.headers };
      }
    }

    // Make the actual request
    const queryString = query ? "?" + encodeQuery(query) : "";
    const response = await this.fetcher(
      this.baseURL + path + queryString,
      init
    );

    // handle any error responses
    if (!response.ok) {
      // try and get the error message from the response body
      let body: APIErrorResponse = {
        code: ErrCode.Unknown,
        message: `request failed: status ${response.status}`,
      };

      // if we can get the structured error we should, otherwise give a best effort
      try {
        const text = await response.text();

        try {
          const jsonBody = JSON.parse(text);
          if (isAPIErrorResponse(jsonBody)) {
            body = jsonBody;
          } else {
            body.message += ": " + JSON.stringify(jsonBody);
          }
        } catch {
          body.message += ": " + text;
        }
      } catch (e) {
        // otherwise we just append the text to the error message
        body.message += ": " + String(e);
      }

      throw new APIError(response.status, body);
    }

    return response;
  }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
  code: ErrCode;
  message: string;
  details?: any;
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
  return (
    err !== undefined &&
    err !== null &&
    isErrCode(err.code) &&
    typeof err.message === "string" &&
    (err.details === undefined ||
      err.details === null ||
      typeof err.details === "object")
  );
}

function isErrCode(code: any): code is ErrCode {
  return code !== undefined && Object.values(ErrCode).includes(code);
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
  /**
   * The HTTP status code associated with the error.
   */
  public readonly status: number;

  /**
   * The Encore error code
   */
  public readonly code: ErrCode;

  /**
   * The error details
   */
  public readonly details?: any;

  constructor(status: number, response: APIErrorResponse) {
    // extending errors causes issues after you construct them, unless you apply the following fixes
    super(response.message);

    // set error name as constructor name, make it not enumerable to keep native Error behavior
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
    Object.defineProperty(this, "name", {
      value: "APIError",
      enumerable: false,
      configurable: true,
    });

    // fix the prototype chain
    if ((Object as any).setPrototypeOf == undefined) {
      (this as any).__proto__ = APIError.prototype;
    } else {
      Object.setPrototypeOf(this, APIError.prototype);
    }

    // capture a stack trace
    if ((Error as any).captureStackTrace !== undefined) {
      (Error as any).captureStackTrace(this, this.constructor);
    }

    this.status = status;
    this.code = response.code;
    this.details = response.details;
  }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
  return err instanceof APIError;
}

export enum ErrCode {
  /**
   * OK indicates the operation was successful.
   */
  OK = "ok",

  /**
   * Canceled indicates the operation was canceled (typically by the caller).
   *
   * Encore will generate this error code when cancellation is requested.
   */
  Canceled = "canceled",

  /**
   * Unknown error. An example of where this error may be returned is
   * if a Status value received from another address space belongs to
   * an error-space that is not known in this address space. Also
   * errors raised by APIs that do not return enough error information
   * may be converted to this error.
   *
   * Encore will generate this error code in the above two mentioned cases.
   */
  Unknown = "unknown",

  /**
   * InvalidArgument indicates client specified an invalid argument.
   * Note that this differs from FailedPrecondition. It indicates arguments
   * that are problematic regardless of the state of the system
   * (e.g., a malformed file name).
   *
   * This error code will not be generated by the gRPC framework.
   */
  InvalidArgument = "invalid_argument",

  /**
   * DeadlineExceeded means operation expired before completion.
   * For operations that change the state of the system, this error may be
   * returned even if the operation has completed successfully. For
   * example, a successful response from a server could have been delayed
   * long enough for the deadline to expire.
   *
   * The gRPC framework will generate this error code when the deadline is
   * exceeded.
   */
  DeadlineExceeded = "deadline_exceeded",

  /**
   * NotFound means some requested entity (e.g., file or directory) was
   * not found.
   *
   * This error code will not be generated by the gRPC framework.
   */
  NotFound = "not_found",

  /**
   * AlreadyExists means an attempt to create an entity failed because one
   * already exists.
   *
   * This error code will not be generated by the gRPC framework.
   */
  AlreadyExists = "already_exists",

  /**
   * PermissionDenied indicates the caller does not have permission to
   * execute the specified operation. It must not be used for rejections
   * caused by exhausting some resource (use ResourceExhausted
   * instead for those errors). It must not be
   * used if the caller cannot be identified (use Unauthenticated
   * instead for those errors).
   *
   * This error code will not be generated by the gRPC core framework,
   * but expect authentication middleware to use it.
   */
  PermissionDenied = "permission_denied",

  /**
   * ResourceExhausted indicates some resource has been exhausted, perhaps
   * a per-user quota, or perhaps the entire file system is out of space.
   *
   * This error code will be generated by the gRPC framework in
   * out-of-memory and server overload situations, or when a message is
   * larger than the configured maximum size.
   */
  ResourceExhausted = "resource_exhausted",

  /**
   * FailedPrecondition indicates operation was rejected because the
   * system is not in a state required for the operation's execution.
   * For example, directory to be deleted may be non-empty, an rmdir
   * operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FailedPrecondition, Aborted, and Unavailable:
   *  (a) Use Unavailable if the client can retry just the failing call.
   *  (b) Use Aborted if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FailedPrecondition if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FailedPrecondition
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FailedPrecondition if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   *
   * This error code will not be generated by the gRPC framework.
   */
  FailedPrecondition = "failed_precondition",

  /**
   * Aborted indicates the operation was aborted, typically due to a
   * concurrency issue like sequencer check failures, transaction aborts,
   * etc.
   *
   * See litmus test above for deciding between FailedPrecondition,
   * Aborted, and Unavailable.
   */
  Aborted = "aborted",

  /**
   * OutOfRange means operation was attempted past the valid range.
   * E.g., seeking or reading past end of file.
   *
   * Unlike InvalidArgument, this error indicates a problem that may
   * be fixed if the system state changes. For example, a 32-bit file
   * system will generate InvalidArgument if asked to read at an
   * offset that is not in the range [0,2^32-1], but it will generate
   * OutOfRange if asked to read from an offset past the current
   * file size.
   *
   * There is a fair bit of overlap between FailedPrecondition and
   * OutOfRange. We recommend using OutOfRange (the more specific
   * error) when it applies so that callers who are iterating through
   * a space can easily look for an OutOfRange error to detect when
   * they are done.
   *
   * This error code will not be generated by the gRPC framework.
   */
  OutOfRange = "out_of_range",

  /**
   * Unimplemented indicates operation is not implemented or not
   * supported/enabled in this service.
   *
   * This error code will be generated by the gRPC framework. Most
   * commonly, you will see this error code when a method implementation
   * is missing on the server. It can also be generated for unknown
   * compression algorithms or a disagreement as to whether an RPC should
   * be streaming.
   */
  Unimplemented = "unimplemented",

  /**
   * Internal errors. Means some invariants expected by underlying
   * system has been broken. If you see one of these errors,
   * something is very broken.
   *
   * This error code will be generated by the gRPC framework in several
   * internal error conditions.
   */
  Internal = "internal",

  /**
   * Unavailable indicates the service is currently unavailable.
   * This is a most likely a transient condition and may be corrected
   * by retrying with a backoff. Note that it is not always safe to retry
   * non-idempotent operations.
   *
   * See litmus test above for deciding between FailedPrecondition,
   * Aborted, and Unavailable.
   *
   * This error code will be generated by the gRPC framework during
   * abrupt shutdown of a server process or network connection.
   */
  Unavailable = "unavailable",

  /**
   * DataLoss indicates unrecoverable data loss or corruption.
   *
   * This error code will not be generated by the gRPC framework.
   */
  DataLoss = "data_loss",

  /**
   * Unauthenticated indicates the request does not have valid
   * authentication credentials for the operation.
   *
   * The gRPC framework will generate this error code when the
   * authentication metadata is invalid or a Credentials callback fails,
   * but also expect authentication middleware to generate it.
   */
  Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, {
  requestInit: { credentials: "include" },
});
